<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:flex="http://www.springframework.org/schema/flex"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/flex 
		http://www.springframework.org/schema/flex/spring-flex.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
 	<!-- Supporting Spring MVC Infrastructure for RESTful @Controllers -->
 	<context:component-scan base-package="org.springframework.flex.samples" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
	</context:component-scan>
	
 	<mvc:annotation-driven/>
 	
 	<mvc:default-servlet-handler/>
 
 	<!-- Flex-specific Configuration -->
	<flex:message-broker mapping-order="1">
		<flex:mapping pattern="/messagebroker/*"/>
		<flex:message-service
			default-channels="my-streaming-amf,my-longpolling-amf,my-polling-amf" />
		<flex:secured />
	</flex:message-broker>
	
	<!-- This BeanPostProcessor adds the AmfHttpMessageConverter to the list of registered HttpMessageConverters -->
 	<bean id="amfInstaller" class="org.springframework.flex.samples.rest.HandlerAdapterPostProcessor"/>
 	
 	<!-- Handles content negotiation for RESTful requests.  This is used in addition to the AmfHttpMessageConverter to 
 	     take advantage of it's ability to use the URL's file extension instead of relying on the Accept header.  Necessary 
 	     since the Accept header can't be manipulated by the Flash player. -->
 	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
 		<property name="mediaTypes">
			<map>
				<entry key="amf" value="application/x-amf"/>
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.flex.http.AmfView" />
			</list>
		</property>
 	</bean>
	
	<!-- Expose the productService bean for BlazeDS remoting -->
	<flex:remoting-destination ref="productService" />

	<!-- Expose the contactService bean for BlazeDS remoting -->
	<flex:remoting-destination ref="contactService" />

	<!-- Expose the securedProductService bean for BlazeDS remoting -->
	<flex:remoting-destination ref="securedProductService" />
	
	<!-- Helper for getting the currently authenticated user -->
    <bean id="securityHelper" class="org.springframework.flex.samples.secured.Security4Helper">
        <flex:remoting-destination/>
    </bean>

	<!-- Messaging destinations -->
	<flex:message-destination id="chat" />
	<flex:message-destination id="secured-chat" send-security-constraint="trusted" />
	<flex:message-destination id="simple-feed" />
	<flex:message-destination id="market-feed" allow-subtopics="true" subtopic-separator="." />
	<flex:jms-message-destination id="jms-chat" jms-destination="chatTopic" /> 	<!-- See configuration of "chatTopic" in /WEB-INF/spring/infrastructure-config.xml -->
	<flex:integration-message-destination id="si-receive" message-channel="toFlex"/> <!-- See configuration of "toFlex" in /WEB-INF/spring/integration-config.xml -->
	<flex:integration-message-destination id="si-send" message-channel="fromFlex"/> <!-- See configuration of "fromFlex" in /WEB-INF/spring/integration-config.xml -->    	

	<!-- MessageTemplate makes it easy to publish messages -->
	<bean id="defaultMessageTemplate" class="org.springframework.flex.messaging.MessageTemplate" />

	<!-- Pojo used to start and stop the data feed that pushes data in the 'simple-feed' destination -->
	<bean id="simpleFeedStarter" class="org.springframework.flex.samples.simplefeed.SimpleFeed">
		<constructor-arg ref="defaultMessageTemplate" />
		<flex:remoting-destination />
	</bean>

	<!-- Pojo used to start and stop the data feed that pushes data in the 'market-feed' destination -->
	<bean id="marketFeedStarter" class="org.springframework.flex.samples.marketfeed.MarketFeed">
		<constructor-arg ref="defaultMessageTemplate" />
		<constructor-arg value="stocklist.xml" />
		<flex:remoting-destination />
	</bean>

</beans>